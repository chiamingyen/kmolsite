<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kmolsite</title><link href="http://chiamingyen.github.io/kmolsite/blog/" rel="alternate"></link><link href="http://chiamingyen.github.io/kmolsite/blog/feeds/leo-editor.atom.xml" rel="self"></link><id>http://chiamingyen.github.io/kmolsite/blog/</id><updated>2015-12-21T20:53:12+08:00</updated><entry><title>Develop Python Program in Leo Editor</title><link href="http://chiamingyen.github.io/kmolsite/blog/posts/2015/12/21/develop-python-program-in-leo-editor/" rel="alternate"></link><updated>2015-12-21T20:53:12+08:00</updated><author><name>kmol</name></author><id>tag:chiamingyen.github.io,2015-12-21:kmolsite/blog/posts/2015/12/21/develop-python-program-in-leo-editor/</id><summary type="html">&lt;p&gt;在 Leo Editor 環境開發並執行 Python 程式&lt;/p&gt;


&lt;p&gt;以下我們利用 Leo Editor 用來開發 CherryPy 網際程式, 首先開啟一個新的 Leo Editor 專案&lt;/p&gt;
&lt;p&gt;新增一個節點, 標題寫上"@edit mycherrypy1.py", 而內容則是:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cherrypy&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@cherrypy.expose&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World, 可以開始開發 Cherrypy 程式!&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;cherrypy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
接著, 再建立一個節點, 標題寫上"@button run mycherrypy1.py", 而內容則是:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;start cmd /c v:\ide\python34\python mycherrypy1.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;done&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
然後, 將這個專案存為  cherrypy1.leo, 並且將滑鼠停在 @button run mycherrypy1.py 這個節點上, 按下上方的 script-button, 系統將會建立一個按鈕.&lt;/p&gt;
&lt;p&gt;當您按下這個按鈕時, Leo Editor 將會執行這個 button 所對應的 Python 程式, 也就是在背後執行"啟動執行 mycherrypy1.py"的 dos command 指令.&lt;/p&gt;
&lt;p&gt;這樣的 CherrPy 程式編輯與執行, 可以在程式內容更新時, 由此背後執行的 dos command 自動重新啟動 CherryPy 程式, 而無需使用者介入開關.&lt;/p&gt;
&lt;p&gt;總結上述過程:&lt;/p&gt;
&lt;p&gt;運用  @edit 節點指令, 將節點的內容存入外部的檔案, 在此就是建立一個可以在近端執行的 CherryPy 網際程式
運用  @button 可以建立一個內容為 Python 程式的指令按鈕, 當使用者按下此一按鈕, Leo Editor 就會設法執行此一 Python 程式
將與按鈕對應的程式透過 subprocess 模組, 讓程式在系統背景狀態下執行, 表示不要與 Leo Editor 執行中的 Python 程序有所瓜葛
這樣的 CherryPy 程式開發模式, 當使用者更新程式內容時, 系統會自動關閉, 再啟動 CherryPy 程式, 而使用者也可以透過 Ctrl+C 關閉上面所開啟的 dos command 程式執行
所完成的 leo 專案: https://copy.com/GXuWZ6YwaaiPpZKd&lt;/p&gt;</summary><category term="Python"></category><category term="Cherrypy"></category></entry><entry><title>Recursively import all python files into Leo Editor</title><link href="http://chiamingyen.github.io/kmolsite/blog/posts/2015/12/21/recursively-import-all-python-files-into-leo-editor/" rel="alternate"></link><updated>2015-12-21T20:53:12+08:00</updated><author><name>kmol</name></author><id>tag:chiamingyen.github.io,2015-12-21:kmolsite/blog/posts/2015/12/21/recursively-import-all-python-files-into-leo-editor/</id><summary type="html">&lt;p&gt;以遞迴方式導入 Python 程式碼.&lt;/p&gt;


&lt;p&gt;此功能已經內建在 Leo Editor 的 scripts/scripts.leo 中, 程式碼如下:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Recursively import all python files in a directory and clean the result.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recursiveImport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;dir_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;./&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;@clean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# The new best practice.&lt;/span&gt;
    &lt;span class="n"&gt;one_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;safe_at_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;theTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# Same as [&amp;#39;.py&amp;#39;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
將此一節點從 scripts.leo 取出後, 存入要 import 程式碼的專案目錄中, 然後存為 .leo 後, 按下 Ctrl+b 就可以運行, 當然導入之後, 所有節點都以 @path 開頭, 表示此 leo 檔案並未與外部檔案直接存取互動, 而是將程式碼從外部檔案中, 架構性地取出, 並且存在 leo 專案檔中.&lt;/p&gt;
&lt;p&gt;另外, 也可以透過下列程式導入特定目錄中的 Python 程式:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;leo.core.leoImport&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;leoImport&lt;/span&gt;
&lt;span class="n"&gt;leoImport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;importFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="importer"></category><category term="Python"></category></entry><entry><title>Leo Editor 教學(一)</title><link href="http://chiamingyen.github.io/kmolsite/blog/posts/2015/12/19/leo-editor-jiao-xue-yi/" rel="alternate"></link><updated>2015-12-19T11:17:54+08:00</updated><author><name>kmol</name></author><id>tag:chiamingyen.github.io,2015-12-19:kmolsite/blog/posts/2015/12/19/leo-editor-jiao-xue-yi/</id><summary type="html">&lt;p&gt;有人說, Leo 編輯器是程式開發歷程上的一項創新, 也有人說, 一旦用上手, 就再也回不去了.&lt;/p&gt;


&lt;p&gt;但是, 這樣一套看似程式開發與資料編輯管理的神器級工具, 為何如此冷門, 好像受歡迎程式不如預期?&lt;/p&gt;
&lt;p&gt;經過整理歸納, 理由如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leo Editor 歷經 Python2 與 Tkinter 的年代, 到目前採 Python3 與 PyQt5 的架構後, 網路上仍然留存許多幾年前甚或十年前的舊導引資料, 初學者很難掌握正確的資訊, 因此無法輕易導入.&lt;/li&gt;
&lt;li&gt;Leo Editor 雖然全部使用 Python 編寫, 但是在同時支援 Python2 與 Python3 的情況下, 程式碼中仍留存許多老舊的設計與秘笈指令, 即使是使用 Leo Editor 多年的老手都很不容易通盤掌握, 更遑論新手.&lt;/li&gt;
&lt;li&gt;Leo Editor 的開發群面對龐大的程式碼, 雖然不斷積極在思考改良, 但是真正能夠動手貢獻新功能或參與計劃的人數, 卻非常少, 因此進展的速度與靈活度並非很高.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;總之, Leo Editor 並非是一套能夠輕易上手的工具, 但也正因為如此, 才需要有更多人能夠面對上述三項問題, 努力提供更多的實用導引資料, 介紹比較常用的功能, 而且協助 Leo Editor 開發群, 讓這套工具可以由更多新手接棒, 持續更新改進.&lt;/p&gt;
&lt;p&gt;以下, 我們將從系統的安裝開始, 逐步介紹 Leo Editor 的相關功能.&lt;/p&gt;
&lt;h1&gt;安裝 Leo Editor&lt;/h1&gt;
&lt;p&gt;Leo Editor 在 5.1 版時推出 @clean 節點指令功能, 這項新功能改進了先前 @auto 指令在內容置入 Leo Editor 特有標註的問題, 因此大家若要安裝, 記得一定要使用 5.1 以上的版本.&lt;/p&gt;
&lt;p&gt;至於什麼是"節點指令功能", 什麼又是"Leo Editor 特有標註", 我們隨後再來了解.&lt;/p&gt;
&lt;p&gt;Leo Editor 推廣上的另外一個問題, 上面已經提過, 門檻高導致冷門, 參與人數少則導致 Ubuntu 目前的 apt-get install leo, 仍然會安裝舊的 Leo Editor 5.0 版, 因此初學者必須非常細心, 努力收集資料, 綜合判讀, 才能走上一條正確的學習之路.&lt;/p&gt;
&lt;p&gt;好了, 我們先從 Windows 操作系統的安裝看起.&lt;/p&gt;
&lt;p&gt;因為 Leo Editor 5.1 版可以在 Python3 環境下開啟, 而 Leo Editor 5.1 版採用 PyQt 作為圖形介面, 因此 Leo Editor 5.1 版的安裝 , 就必須從 Python3 與 PyQt 的安裝開始.&lt;/p&gt;
&lt;p&gt;在 Windows 環境下安裝 Python3 非常簡單, 但是安裝 PyQt 則相對比較困難, 主要原因在於 Windows 環境下 PyQt 的安裝, 牽涉到程式碼的編譯, 而通常網路上現成的簡易 PyQt 安裝套件會牽涉到版本, 假如 Python3 與 PyQt 版本沒有正確搭配, 簡易 PyQt 安裝套件就無法完成安裝.&lt;/p&gt;
&lt;p&gt;以下在 Windows 環境中的 Python3 與 PyQt 安裝, 又分為固定式安裝與可攜式安裝, 而所謂的可攜式安裝 ,其實就是在固定式安裝之後, 透過額外的啟動及卸載設定, 讓安裝套件可以在不同的 Windows 操作系統中使用.&lt;/p&gt;
&lt;h2&gt;Windows 環境 Python3 安裝&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安裝 Python 3.4, 選擇不安裝 pip&lt;/li&gt;
&lt;li&gt;利用 python get-pip.py, 安裝 pip&lt;/li&gt;
&lt;li&gt;安裝 PyQt5-5.5.1-gpl-Py3.4-Qt5.5.1-x64.exe &lt;a href="https://www.riverbankcomputing.com/software/pyqt/download5"&gt;https://www.riverbankcomputing.com/software/pyqt/download5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下載 Leo Editor 原始碼, &lt;a href="https://github.com/leo-editor/leo-editor/releases/tag/broke-abbrev"&gt;https://github.com/leo-editor/leo-editor/releases/tag/broke-abbrev&lt;/a&gt; 利用 pip install broke-abbrev.zip 安裝 Leo Editor&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;可攜 Python3.4 設定&lt;/h3&gt;
&lt;p&gt;建立 data 目錄, 並在 data 目錄中建立 home, tmp, apps, Python34, SciTE 等子目錄, 其中 Python34 來自 C:\Python34, SciTE 也是安裝後直接複製到 data 目錄中.&lt;/p&gt;
&lt;p&gt;將 lanuchLeo.py 存到 data/apps 目錄中, 用來啟動 Leo Editor&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Leo launcher script&lt;/span&gt;
&lt;span class="sd"&gt;A minimal script to launch leo.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;leo.core.runLeo&lt;/span&gt;
&lt;span class="n"&gt;leo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runLeo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
啟動與關閉可攜系統的 start.bat 與 stop.bat 設定碼如下:&lt;/p&gt;
&lt;p&gt;start.bat 設定&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;off&lt;/span&gt;
&lt;span class="c"&gt;REM 設定 V 硬碟代號與 data 目錄對應&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;Disk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;y
subst &lt;span class="nv"&gt;%Disk%&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;REM 設定 leo 相關對應 Home 位置&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;HomePath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\home
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;HomeDrive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\home
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\home
&lt;span class="c"&gt;REM 設定 Leo 所用的編輯器&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;LEO_EDITOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\SciTE\SciTE.exe
&lt;span class="c"&gt;REM 將後續的指令執行, 以 %Disk% 為主&lt;/span&gt;
&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:
&lt;span class="c"&gt;REM 設定 PYTHONPATH&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\Python&lt;span class="m"&gt;34&lt;/span&gt;
&lt;span class="c"&gt;REM Jupyter 設定&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;JUPYTER_CONFIG_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\home\.jupyter\profile_nbserver
&lt;span class="c"&gt;REM 設定 Jre 路徑, 特別注意 CLASSPATH 後的分號, 一定要有&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\Java\jre&lt;span class="m"&gt;1&lt;/span&gt;.&lt;span class="m"&gt;8&lt;/span&gt;.&lt;span class="m"&gt;0&lt;/span&gt;_&lt;span class="m"&gt;51&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;CLASSPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;.;
&lt;span class="c"&gt;REM 設定 node.js 相關路徑&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;NODE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\nodejs\node_modules\npm\node_modules;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\nodejs\node_modules\npm
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;path1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%PATH%&lt;/span&gt;;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\Python&lt;span class="m"&gt;34&lt;/span&gt;;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\Anaconda&lt;span class="m"&gt;3&lt;/span&gt;\Scripts;&lt;span class="nv"&gt;%JAVA_HOME%&lt;/span&gt;\bin;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\nodejs;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;path2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\apps\Git\bin;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\apps\pandoc;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\apps\portableLatex\MiKTeX\texmf\miktex\bin;
path&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%path1%&lt;/span&gt;;&lt;span class="nv"&gt;%path2%&lt;/span&gt;;
&lt;span class="c"&gt;REM 啟動  SciTE&lt;/span&gt;
start &lt;span class="n"&gt;/MIN&lt;/span&gt; &lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\SciTE\SciTE.exe
&lt;span class="c"&gt;REM 取 IPV4 IP address&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;/f&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;delims=[] tokens=2&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;%%a&lt;/span&gt; in (&lt;span class="s1"&gt;&amp;#39;ping -4 %computername% -n 1 ^| findstr &amp;quot;[&amp;quot;&amp;#39;&lt;/span&gt;) &lt;span class="k"&gt;do&lt;/span&gt; (&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;thisip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%%a&lt;/span&gt;)
&lt;span class="c"&gt;REM echo %thisip%&lt;/span&gt;
&lt;span class="c"&gt;REM 取 IPV6 IP address&lt;/span&gt;
&lt;span class="c"&gt;REM for /f &amp;quot;delims=[] tokens=2&amp;quot; %%a in (&amp;#39;ping %computername% -n 1 ^| findstr &amp;quot;[&amp;quot;&amp;#39;) do (set thisip=%%a)&lt;/span&gt;
&lt;span class="c"&gt;REM echo %thisip%&lt;/span&gt;
&lt;span class="c"&gt;REM 啟動 Jupyter&lt;/span&gt;
&lt;span class="k"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\tmp
start &lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\Python&lt;span class="m"&gt;34&lt;/span&gt;\python.exe &lt;span class="s2"&gt;&amp;quot;%Disk%:\Python34\Scripts\jupyter-script.py&amp;quot;&lt;/span&gt; notebook --ip&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%thisip%&lt;/span&gt; --certfile&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\home\ssl_cert.pem --profile&lt;span class="o"&gt;=&lt;/span&gt;nbserver
&lt;span class="k"&gt;cd&lt;/span&gt; ..
&lt;span class="c"&gt;REM 啟動 VMEmulator&lt;/span&gt;
&lt;span class="c"&gt;REM start %Disk%:\apps\nand2tetris\tools\VMEmulator.bat&lt;/span&gt;
&lt;span class="c"&gt;REM 啟動 Assembler&lt;/span&gt;
&lt;span class="c"&gt;REM start %Disk%:\apps\nand2tetris\tools\Assembler.bat&lt;/span&gt;
&lt;span class="c"&gt;REM 啟動 CPUEmulator&lt;/span&gt;
&lt;span class="c"&gt;REM start %Disk%:\apps\nand2tetris\tools\CPUEmulator.bat&lt;/span&gt;
&lt;span class="c"&gt;REM 啟動 HardwareSimulator&lt;/span&gt;
&lt;span class="c"&gt;REM start %Disk%:\apps\nand2tetris\tools\HardwareSimulator.bat&lt;/span&gt;
&lt;span class="c"&gt;REM 啟動 JackCompiler&lt;/span&gt;
&lt;span class="c"&gt;REM start %Disk%:\apps\nand2tetris\tools\JackCompiler.bat&lt;/span&gt;
&lt;span class="c"&gt;REM 啟動 TextComparer&lt;/span&gt;
&lt;span class="c"&gt;REM start %Disk%:\apps\nand2tetris\tools\TextComparer.bat&lt;/span&gt;
&lt;span class="c"&gt;REM 啟動 node.js&lt;/span&gt;
&lt;span class="c"&gt;REM 啟動 node.js&lt;/span&gt;
&lt;span class="c"&gt;REM start /MIN cmd.exe /k &amp;quot;%Disk%:\nodejs\nodejsvars.bat&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;REM start %Disk%:\nodejs\node.exe&lt;/span&gt;
start &lt;span class="n"&gt;/MIN&lt;/span&gt; cmd.exe
start &lt;span class="n"&gt;/MIN&lt;/span&gt; cmd.exe
start &lt;span class="n"&gt;/MIN&lt;/span&gt; cmd.exe
&lt;span class="c"&gt;REM 啟動 node.js&lt;/span&gt;
&lt;span class="c"&gt;REM start %Disk%:\IDE\nodejs\node.exe&lt;/span&gt;
&lt;span class="c"&gt;REM C:\WINDOWS\system32\cmd.exe /k %Disk%:\IDE\nodejs\nodejsvars.bat&lt;/span&gt;
&lt;span class="c"&gt;REM 啟動 Leo 編輯器&lt;/span&gt;
python.exe &lt;span class="nv"&gt;%Disk%&lt;/span&gt;:\apps\launchLeo.py
Exit
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
stop.bat&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;off&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;Disk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;y
&lt;span class="c"&gt;REM 關閉 nginx&lt;/span&gt;
&lt;span class="c"&gt;REM taskkill /IM nginx.exe /F&lt;/span&gt;
&lt;span class="c"&gt;REM 關閉 SciTE&lt;/span&gt;
taskkill &lt;span class="n"&gt;/IM&lt;/span&gt; SciTE.exe &lt;span class="n"&gt;/F&lt;/span&gt;
&lt;span class="c"&gt;REM 關閉 python&lt;/span&gt;
taskkill &lt;span class="n"&gt;/IM&lt;/span&gt; python.exe &lt;span class="n"&gt;/F&lt;/span&gt;
&lt;span class="c"&gt;REM 清除 log 資料&lt;/span&gt;
path&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%PATH%&lt;/span&gt;;
&lt;span class="c"&gt;REM del /Q /F  Y:\tmp\*.*&lt;/span&gt;
&lt;span class="c"&gt;REM copy Y:\www\cmsimplexh_20130809\cmsimple\log_clean.txt V:\www\cmsimpleSpring2013\cmsimple\log.txt&lt;/span&gt;
&lt;span class="c"&gt;REM del /Q /F  Y:\tmp\*.*&lt;/span&gt;
&lt;span class="c"&gt;REM 終止虛擬硬碟與目錄的對應&lt;/span&gt;
subst &lt;span class="nv"&gt;%Disk%&lt;/span&gt;: &lt;span class="n"&gt;/D&lt;/span&gt;
&lt;span class="c"&gt;REM 關閉 cmd 指令視窗&lt;/span&gt;
taskkill &lt;span class="n"&gt;/IM&lt;/span&gt; cmd.exe &lt;span class="n"&gt;/F&lt;/span&gt;
EXIT
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
當然也可以直接下載以 Python 3.3 建立的 Windows 可攜式 Leo Editor: &lt;a href="https://github.com/chiamingyen/portable_leoeditor"&gt;https://github.com/chiamingyen/portable_leoeditor&lt;/a&gt;&lt;/p&gt;</summary><category term="大綱編輯"></category><category term="Python"></category><category term="PyQt"></category></entry></feed>