<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kmolsite</title><link href="http://chiamingyen.github.io/kmolsite/" rel="alternate"></link><link href="http://chiamingyen.github.io/kmolsite/feeds/all.atom.xml" rel="self"></link><id>http://chiamingyen.github.io/kmolsite/</id><updated>2015-12-16T14:05:31+08:00</updated><entry><title>How to create a Pelican static site?</title><link href="http://chiamingyen.github.io/kmolsite/how-to-create-a-pelican-static-site.html" rel="alternate"></link><updated>2015-12-16T14:05:31+08:00</updated><author><name>kmol</name></author><id>tag:chiamingyen.github.io,2015-12-16:kmolsite/how-to-create-a-pelican-static-site.html</id><summary type="html">&lt;p&gt;如何在 Github page 建立靜態網誌系統?&lt;/p&gt;


&lt;p&gt;1994 年開始, 許多人用 html 建立功能陽春的網站, 二十一個年頭過去, 無論大家經歷過多麼令人讚嘆激賞的全球資訊網技術, 我們終於又回到當時的起點, 還是採用最陽春的 html 格式來建立網站, 唯一的差別是, 這一次我們真正感受到天涯若比鄰, 遠端與近端, 在分散式版本的最高運行模式下, 原來是同一端.&lt;/p&gt;
&lt;h1&gt;工具組&lt;/h1&gt;
&lt;p&gt;假如您使用 Windows 64 位元操作系統, 可以直接下載可攜式系統 &lt;a href="https://github.com/chiamingyen/kmol2016"&gt;https://github.com/chiamingyen/kmol2016&lt;/a&gt;, 理論上, 只要按下 start.bat, 系統就會啟動 Leo Editor, 並且在對應啟動的 cmd 指令視窗, 就可以直接執行 git 指令.&lt;/p&gt;
&lt;p&gt;假如您使用 Ubuntu 操作系統, 則必須安裝 Python3, PyQt, Leo Editor, Pelican, Markdown, 假如還希望透過 Jupyter 進行 notebook 檔案導入, 還要安裝 Jupyter.&lt;/p&gt;
&lt;h1&gt;Pelican 網誌系統&lt;/h1&gt;
&lt;p&gt;可以透過 git clone 本網站的倉儲資料 &lt;a href="https://github.com/chiamingyen/kmolsite"&gt;https://github.com/chiamingyen/kmolsite&lt;/a&gt;, 然後將分支切換到 gh-pages, 就可以利用 Leo Editor 開啟分支工作目錄中的 kmol2016.leo, 然後開始建立自己的 Pelican 靜態網誌.&lt;/p&gt;
&lt;h1&gt;kmol2016 系統說明&lt;/h1&gt;
&lt;p&gt;這裡所謂的"可攜 kmol2016", 其實就是在 Windows 64 位元的環境中, 可以無需安裝, 直接利用 start.bat 中的設定, 就可以在 Windows 操作系統中執行建立 Pelican 靜態網誌所需要的指令, 其中包括啟動 Leo Editor, 執行 git 指令以及啟動 Jupyter 等.&lt;/p&gt;
&lt;h1&gt;kmolsite 系統說明&lt;/h1&gt;
&lt;p&gt;開啟 kmol2016.leo 後, 可以發現 @path content 以下的子節點, 就是 Pelican 網誌系統的原始 md 檔案, 只要透過 @button local pelican 指令的執行, 就可以在近端建立 Pelican 靜態網誌, 而 @button gh-pages pelican 則用來建立 Github pages 端的 Pelican 靜態網誌資料.&lt;/p&gt;
&lt;p&gt;從"設定與開發"節點下, 可以發現 pelicanconf.py 為近端與遠端的共同設定檔, 而近端透過 Pelican 轉檔時, 則採用 local_publishconf.py, 而 Gihub pages 端則使用 publishconf.py.&lt;/p&gt;
&lt;p&gt;其中因為採用 Tipue search plugin, 在近端使用 tipuesearch_content.js 而在遠端則使用 tipuesearch_content.json, 所以才會將 theme 目錄下區隔近端使用 pelican-bootstrap3_local, 而遠端則使用 pelican-bootstrap3 目錄, 其間的差異在於啟動 Tipue search 搜尋的模式設定, 近端為 static, 而遠端則為 json.&lt;/p&gt;</summary><category term="Python"></category><category term="Github pages"></category><category term="Leo Editor"></category></entry><entry><title>nginx 與 uwsgi 的結合</title><link href="http://chiamingyen.github.io/kmolsite/nginx-yu-uwsgi-de-jie-he.html" rel="alternate"></link><updated>2015-12-16T12:09:04+08:00</updated><author><name>kmol</name></author><id>tag:chiamingyen.github.io,2015-12-16:kmolsite/nginx-yu-uwsgi-de-jie-he.html</id><summary type="html">&lt;p&gt;最新版的 nginx 必須與 2.0 版以上的 uwsgi 配合, 否則無法啟動.&lt;/p&gt;


&lt;p&gt;這是發生在編號 103 HP 伺服器上的問題, 透過查驗, 才知道, 其實在各種協同合作模式中, 必須了解細節才能解決問題.&lt;/p&gt;
&lt;p&gt;2015.11.03 情況: IPV4 與 IPV6 都可以 SSH, 因此從遠端進入, 開始尋找為何 nginx 與 uwsgi 無法正常結合運作.&lt;/p&gt;
&lt;p&gt;首先新增管理者用戶:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo adduser username
sudo visudo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;將 username 納為可以執行 sudo 的帳號&lt;/p&gt;
&lt;p&gt;在 %sudo 行下增加一行,  然後按下 Ctrl+O, 再按 Enter&lt;/p&gt;
&lt;p&gt;經過 uwsgi 版次查驗, 發現透過 sudo apt-get install uwsgi 所安裝的版本為 1.9.17.1 版, 必須設法轉為 2.0 以上版本&lt;/p&gt;
&lt;p&gt;版本查驗:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;uwsgi --version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結果為 1.9.17.1-debian, 必須改為 2.0.11.2, 否則無法與 nginx 結合&lt;/p&gt;
&lt;p&gt;移除利用 sudo apt-get install uwsgi 安裝的 1.9.17.1 版的 uswgi&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get remove uwsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;準備利用 pip3 安裝 uwsgi 其中必須執行 c 程式編譯, 因此必須安裝 build-essential 與 python3-dev&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install build-essential python3-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著利用 pip3 安裝 uwsgi&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo pip3 install uwsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;利用 which uwsgi 找到 2.0.11.2 版的 uwsgi 位於 /usr/local/bin/uwsgi&lt;/p&gt;
&lt;p&gt;因為 /etc/alternatives/uwsgi 指向 /usr/bin/uwsgi-core 為舊版, 因此必須重新設定 symbolic link, 讓 uwsgi 指令指到 2.0 版本.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd /etc/alternatives
sudo rm uwsgi (刪除舊的 symbolic link)
sudo ln -s /usr/local/bin/uwsgi uwsgi (將新的 /usr/local/bin/uwsgi 對應到 uwsgi)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成後執行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service uwsgi restart 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就可順利啟動 nginx 中所對應設定的 CMSimply&lt;/p&gt;</summary><category term="uwsgi"></category><category term="nginx"></category><category term="網際程式"></category><category term="Python"></category></entry><entry><title>Tipue Site Search for Pelican</title><link href="http://chiamingyen.github.io/kmolsite/tipue-site-search-for-pelican.html" rel="alternate"></link><updated>2015-12-16T12:09:04+08:00</updated><author><name>kmol</name></author><id>tag:chiamingyen.github.io,2015-12-16:kmolsite/tipue-site-search-for-pelican.html</id><summary type="html">&lt;p&gt;Pelican 靜態網站關鍵字搜尋.&lt;/p&gt;


&lt;p&gt;在這個網站中, 我們使用 Tipue Search 來搜尋內容.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tipue_search"&gt;https://github.com/getpelican/pelican-plugins/tree/master/tipue_search&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tipue Search requires BeautifulSoup.&lt;/p&gt;
&lt;p&gt;利用 pip 安裝 beautifulsoup4 模組.&lt;/p&gt;
&lt;p&gt;pip install beautifulsoup4&lt;/p&gt;
&lt;p&gt;此外, 為了要執行協同產品開發的設計運算分析, 還要安裝 &lt;a href="http://jupyter.org/"&gt;Jupyter&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;pip install jupyter&lt;/p&gt;
&lt;p&gt;而在 pelican 的網誌 md 檔案中,  則是透過 &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags"&gt;liquid_tags&lt;/a&gt; plugin 中的 notebook 來導入 &lt;a href="https://github.com/jupyter/notebook"&gt;Jupyter notebook&lt;/a&gt; 檔案.&lt;/p&gt;</summary><category term="Pelican Search"></category></entry><entry><title>Remove local and remote branch</title><link href="http://chiamingyen.github.io/kmolsite/remove-local-and-remote-branch.html" rel="alternate"></link><updated>2015-12-16T12:09:04+08:00</updated><author><name>kmol</name></author><id>tag:chiamingyen.github.io,2015-12-16:kmolsite/remove-local-and-remote-branch.html</id><summary type="html">&lt;p&gt;刪除近端與遠端的 Git 分支.&lt;/p&gt;


&lt;p&gt;To delete a local branch&lt;/p&gt;
&lt;p&gt;git branch -D the_local_branch&lt;/p&gt;
&lt;p&gt;To remove a remote branch&lt;/p&gt;
&lt;p&gt;git push origin :the_remote_branch&lt;/p&gt;
&lt;p&gt;or &lt;/p&gt;
&lt;p&gt;git push origin --delete the_remote_branch&lt;/p&gt;</summary><category term="Git 指令"></category></entry><entry><title>Pelican 近端與遠端的設定</title><link href="http://chiamingyen.github.io/kmolsite/pelican-jin-duan-yu-yuan-duan-de-she-ding.html" rel="alternate"></link><updated>2015-12-16T12:09:04+08:00</updated><author><name>kmol</name></author><id>tag:chiamingyen.github.io,2015-12-16:kmolsite/pelican-jin-duan-yu-yuan-duan-de-she-ding.html</id><summary type="html">&lt;p&gt;Pelican 近端與遠端的設定.&lt;/p&gt;


&lt;p&gt;基本的概念是, 在近端時, 靜態網頁使用相對目錄, SITEURL 設為 "./", 而在 Github pages 時, 則採用制式的符號名稱加上 repository 名稱作為 SITEURL.&lt;/p&gt;
&lt;p&gt;另外一個近端與遠端的差異為 Tipue search, 近端時, 利用 static 模組, 將所有網頁內容存為 tipuesearch_content.js, 而在 Github pages 時, 則使用 json 模組, 網頁內容存為 tipuesearch_content.json 格式.&lt;/p&gt;
&lt;p&gt;其中為了在網誌內容編寫與功能開發過程中, 能夠完全在近端測試 Github pages 端的所有功能, 利用 Leo Editor 的 @buttton 與 @edit, 分別針對兩端所需要的不同設定加以區分, 就連 theme 中有關 Tipue search 的啟動與設定, 也是分為近端與遠端兩套.&lt;/p&gt;
&lt;p&gt;在 &lt;a href="http://chiamingyen.github.io/kmolsite"&gt;kmolsite&lt;/a&gt; 的專案中, 我們可以發現, &lt;a href="http://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 在面對這些不同環境, 不同設定, 而必須以不同指令產生不同內容的情況下, 可以說應付自如.&lt;/p&gt;</summary><category term="Pelican 設定"></category></entry><entry><title>Ubuntu 14.04 執行 Python 網際程式</title><link href="http://chiamingyen.github.io/kmolsite/ubuntu-1404-zhi-xing-python-wang-ji-cheng-shi.html" rel="alternate"></link><updated>2015-12-16T12:05:24+08:00</updated><author><name>kmol</name></author><id>tag:chiamingyen.github.io,2015-12-16:kmolsite/ubuntu-1404-zhi-xing-python-wang-ji-cheng-shi.html</id><summary type="html">&lt;p&gt;Nginx 當前端, 在 Ubuntu 以 uwsgi 執行 Python 程式.&lt;/p&gt;


&lt;p&gt;nginx.conf 設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;user www-data;
worker_processes &lt;span class="m"&gt;4&lt;/span&gt;;
pid &lt;span class="n"&gt;/run/nginx.pid;&lt;/span&gt;

events {
    worker_connections &lt;span class="m"&gt;768&lt;/span&gt;;
    # multi_accept &lt;span class="k"&gt;on&lt;/span&gt;;
}

http {

    ##
    # Basic Settings
    ##

    sendfile &lt;span class="k"&gt;on&lt;/span&gt;;
    tcp_nopush &lt;span class="k"&gt;on&lt;/span&gt;;
    tcp_nodelay &lt;span class="k"&gt;on&lt;/span&gt;;
    keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;;
    types_hash_max_size &lt;span class="m"&gt;2048&lt;/span&gt;;
    # server_tokens &lt;span class="k"&gt;off&lt;/span&gt;;

    # server_names_hash_bucket_size &lt;span class="m"&gt;64&lt;/span&gt;;
    # server_name_in_redirect &lt;span class="k"&gt;off&lt;/span&gt;;

    include &lt;span class="n"&gt;/etc/nginx/mime.types;&lt;/span&gt;
    default_type application&lt;span class="n"&gt;/octet-stream;&lt;/span&gt;

    ##
    # Logging Settings
    ##

    access_log &lt;span class="n"&gt;/var/log/nginx/access.log;&lt;/span&gt;
    error_log &lt;span class="n"&gt;/var/log/nginx/error.log;&lt;/span&gt;

    ##
    # Gzip Settings
    ##

    gzip &lt;span class="k"&gt;on&lt;/span&gt;;
    gzip_disable &lt;span class="s2"&gt;&amp;quot;msie6&amp;quot;&lt;/span&gt;;

    # gzip_vary &lt;span class="k"&gt;on&lt;/span&gt;;
    # gzip_proxied any;
    # gzip_comp_level &lt;span class="m"&gt;6&lt;/span&gt;;
    # gzip_buffers &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;k;
    # gzip_http_version &lt;span class="m"&gt;1&lt;/span&gt;.&lt;span class="m"&gt;1&lt;/span&gt;;
    # gzip_types text&lt;span class="n"&gt;/plain&lt;/span&gt; text&lt;span class="n"&gt;/css&lt;/span&gt; application&lt;span class="n"&gt;/json&lt;/span&gt; application&lt;span class="n"&gt;/x-javascript&lt;/span&gt; text&lt;span class="n"&gt;/xml&lt;/span&gt; application&lt;span class="n"&gt;/xml&lt;/span&gt; application&lt;span class="n"&gt;/xml+rss&lt;/span&gt; text&lt;span class="n"&gt;/javascript;&lt;/span&gt;

    ##
    # nginx-naxsi config
    ##
    # Uncomment it &lt;span class="k"&gt;if&lt;/span&gt; you installed nginx-naxsi
    ##

    #include &lt;span class="n"&gt;/etc/nginx/naxsi_core.rules;&lt;/span&gt;

    ##
    # nginx-passenger config
    ##
    # Uncomment it &lt;span class="k"&gt;if&lt;/span&gt; you installed nginx-passenger
    ##

    #passenger_root &lt;span class="n"&gt;/usr;&lt;/span&gt;
    #passenger_ruby &lt;span class="n"&gt;/usr/bin/ruby;&lt;/span&gt;

    ##
    # Virtual Host Configs
    ##

    include &lt;span class="n"&gt;/etc/nginx/conf.d/*.conf;&lt;/span&gt;
    include &lt;span class="n"&gt;/etc/nginx/sites-enabled/*;&lt;/span&gt;
}


#mail {
#   # See sample authentication script at:
#   # http:&lt;span class="n"&gt;//wiki.nginx.org/ImapAuthenticateWithApachePhpScript&lt;/span&gt;
# 
#   # auth_http localhost&lt;span class="n"&gt;/auth.php;&lt;/span&gt;
#   # pop&lt;span class="m"&gt;3&lt;/span&gt;_capabilities &lt;span class="s2"&gt;&amp;quot;TOP&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;USER&amp;quot;&lt;/span&gt;;
#   # imap_capabilities &lt;span class="s2"&gt;&amp;quot;IMAP4rev1&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;UIDPLUS&amp;quot;&lt;/span&gt;;
# 
#   server {
#       listen     localhost:110;
#       protocol   pop&lt;span class="m"&gt;3&lt;/span&gt;;
#       proxy      &lt;span class="k"&gt;on&lt;/span&gt;;
#   }
# 
#   server {
#       listen     localhost:143;
#       protocol   imap;
#       proxy      &lt;span class="k"&gt;on&lt;/span&gt;;
#   }
#}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;include /etc/nginx/sites-enabled/*; 表示導入 sites-enabled 中的所有設定檔.&lt;/p&gt;
&lt;p&gt;而 sites-enabled 中只有一個 default 指向 sites-available/default, 所以隨後的設定都以 sites-available/default 檔案為主&lt;/p&gt;
&lt;p&gt;sites-availables/default 設定檔案:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="n"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="n"&gt;default_server&lt;/span&gt; &lt;span class="n"&gt;ipv6only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;443&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt; &lt;span class="n"&gt;ipv6only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;alias&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hp3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cmsimply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="n"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;uwsgi_pass&lt;/span&gt;  &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;server_name&lt;/span&gt; &lt;span class="nt"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nf"&gt;#ssl&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_certificate&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;nginx&lt;/span&gt;&lt;span class="nc"&gt;.crt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;nginx&lt;/span&gt;&lt;span class="nc"&gt;.key&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_session_timeout&lt;/span&gt; &lt;span class="nt"&gt;5m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_protocols&lt;/span&gt; &lt;span class="nt"&gt;SSLv3&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="nc"&gt;.1&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="nc"&gt;.2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;try_files&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;404&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中的 include uwsgi_params;, 表示 uwsgi_params 檔案必須位於與 default 設定檔案同一個目錄, 也就是必須位於 sites-available 目錄中.&lt;/p&gt;
&lt;p&gt;uwsgi_pass  127.0.0.1:8080; 表示 uwsgi 伺服傳送是透過近端主機中的 8080 埠號傳資料給 nginx, 然後再由 nginx 透過埠號 80 與 443 進行全球資訊網伺服, 因此用戶無法直接擷取 uwsgi 所傳出的資料, 而是經過內部 8080 傳給 nginx 後再以 http 或 https 與請求連線的客戶端進行互動.&lt;/p&gt;
&lt;p&gt;uwsgi_params 檔案內容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;uwsgi_param QUERY_STRING &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;query_string&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;uwsgi_param REQUEST_METHOD &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;request_method&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;uwsgi_param CONTENT_TYPE &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;content_type&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;uwsgi_param CONTENT_LENGTH &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;content_length&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;uwsgi_param REQUEST_URI &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;request_uri&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;uwsgi_param PATH_INFO &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;document_uri&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;uwsgi_param DOCUMENT_ROOT &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;document_root&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;uwsgi_param SERVER_PROTOCOL &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;server_protocol&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;uwsgi_param REMOTE_ADDR &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;remote_addr&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;uwsgi_param REMOTE_PORT &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;remote_port&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;uwsgi_param SERVER_ADDR &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;server_addr&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;uwsgi_param SERVER_PORT &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;server_port&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;uwsgi_param SERVER_NAME &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;server_name&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;處理好 nginx 設定之後, 接著處理 uwsgi 的啟動, 希望在開機時就交由操作系統啟動, 這裡透過 /etc/init/uwsgi.conf 設定完成.&lt;/p&gt;
&lt;p&gt;/etc/init/uwsgi.conf 檔案內容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;description &amp;quot;uwsgi Emperor&amp;quot;
start on runlevel [2345]
stop on runlevel [06]

respawn

exec uwsgi --uid hp3 --gid hp3 --emperor /home/hp3/uwsgi_ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上採用 uwsgi Emperor 的設定方式啟動 /home/hp3/uwsgi_ini 目錄中的所有 uwsgi 程式啟動.&lt;/p&gt;
&lt;p&gt;而目前位於 /home/hp3/uwsgi_ini 目錄中只有一個 uwsgi.ini  檔案, 內容如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;:8080&lt;/span&gt;
&lt;span class="na"&gt;processes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;4&lt;/span&gt;
&lt;span class="na"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/hp3/cmsimply/wsgi&lt;/span&gt;
&lt;span class="na"&gt;wsgi-file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/hp3/cmsimply/wsgi/application&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;表示要以近端的 8080 埠號啟動 uwsgi, 而且設定執行目錄與執行的 uwsgi 應用程式 /home/hp3/cmsimply/wsgi/application&lt;/p&gt;
&lt;p&gt;這時很重要的一點就是 application 必須採 uwsgi 啟動設定, 也就是與 OpenShift 端的啟動方式相同.&lt;/p&gt;
&lt;p&gt;/home/hp3/cmsimply/wsgi/application 最後啟動設定為:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;if inOpenshift:
    # operate in OpenShift
    application = cherrypy.Application(root, config = application_conf)
else:
    # operate in localhost
    #cherrypy.server.socket_port = 8080
    #cherrypy.server.socket_host = &amp;#39;XXX.XXX.17.103&amp;#39;
    #cherrypy.quickstart(root, config = application_conf)
    application = cherrypy.Application(root, config = application_conf)
&lt;/pre&gt;&lt;/div&gt;</summary><category term="網際程式"></category><category term="Python"></category><category term="nginx"></category><category term="uwsgi"></category></entry><entry><title>2016kmol initialized</title><link href="http://chiamingyen.github.io/kmolsite/2016kmol-initialized.html" rel="alternate"></link><updated>2015-12-15T17:59:55+08:00</updated><author><name>kmol</name></author><id>tag:chiamingyen.github.io,2015-12-15:kmolsite/2016kmol-initialized.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/chiamingyen/kmol2016"&gt;https://github.com/chiamingyen/kmol2016&lt;/a&gt; 是一個 Windows 64 位元環境下的可攜程式系統.&lt;/p&gt;


&lt;p&gt;製作步驟如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;選擇安裝 Python 3.4.4, 原因為 Python 3.5 與 PyQt5 必須自行編譯,  為了簡化, 選擇 Python 3.4.4, 並且使用現成的 &lt;a href="https://riverbankcomputing.com/software/pyqt/download5"&gt;PyQt5-5.5.1-gpl-Py3.4-Qt5.5.1-x64.exe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;安裝 Python 3.4.4 時, 因為要製作成可攜免安裝套件, 故意不安裝 pip, 隨後再透過 &lt;a href="https://bootstrap.pypa.io/get-pip.py"&gt;get-pip.py&lt;/a&gt; 以手動安裝.&lt;/li&gt;
&lt;li&gt;安裝 pip 後, 再利用 &lt;a href="http://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 原始碼安裝, 同時利用 pip 安裝 &lt;a href="https://github.com/getpelican/pelican"&gt;pelican&lt;/a&gt; Markdown &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;為了要使用 &lt;a href="http://www.tipue.com/search/"&gt;Tipue Search&lt;/a&gt;, 再安裝 &lt;a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;beautifulsoup4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;為了要執行協同產品開發的設計運算分析, 還要安裝 &lt;a href="http://jupyter.org/"&gt;Jupyter&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="啟動"></category></entry><entry><title>2016kmol 測試</title><link href="http://chiamingyen.github.io/kmolsite/2016kmol-ce-shi.html" rel="alternate"></link><updated>2015-12-15T17:49:58+08:00</updated><author><name>kmol</name></author><id>tag:chiamingyen.github.io,2015-12-15:kmolsite/2016kmol-ce-shi.html</id><summary type="html">&lt;p&gt;在 Plican 靜態網頁系統中,Title 若使用中文, 而且不指定 Slug 的情況下, 系統會將中文字逐一轉為英文拼音來建立網誌檔案.&lt;/p&gt;


&lt;p&gt;以下利用 Brython 語法, 在網頁中繪圖:&lt;/p&gt;
&lt;p&gt;使用方法: &lt;a href="http://www.brython.info/"&gt;http://www.brython.info/&lt;/a&gt;&lt;/p&gt;
&lt;!-- 導入 brython_dist.js --&gt;&lt;/p&gt;
&lt;script type="text/javascript" src="http://brython.info/src/brython_dist.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 brython() --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下利用 Brython 程式執行繪圖 --&gt;

&lt;canvas id="plotarea" width="300" height="200"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
&lt;/script&gt;</summary><category term="平面繪圖"></category></entry></feed>