<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kmolsite</title><link href="./" rel="alternate"></link><link href="./feeds/pelican.atom.xml" rel="self"></link><id>./</id><updated>2015-12-16T14:05:31+08:00</updated><entry><title>How to create a Pelican static site?</title><link href="./how-to-create-a-pelican-static-site.html" rel="alternate"></link><updated>2015-12-16T14:05:31+08:00</updated><author><name>kmol</name></author><id>tag:,2015-12-16:./how-to-create-a-pelican-static-site.html</id><summary type="html">&lt;p&gt;如何在 Github page 建立靜態網誌系統?&lt;/p&gt;


&lt;p&gt;1994 年開始, 許多人用 html 建立功能陽春的網站, 二十一個年頭過去, 無論大家經歷過多麼令人讚嘆激賞的全球資訊網技術, 我們終於又回到當時的起點, 還是採用最陽春的 html 格式來建立網站, 唯一的差別是, 這一次我們真正感受到天涯若比鄰, 遠端與近端, 在分散式版本的最高運行模式下, 原來是同一端.&lt;/p&gt;
&lt;h1&gt;工具組&lt;/h1&gt;
&lt;p&gt;假如您使用 Windows 64 位元操作系統, 可以直接下載可攜式系統 &lt;a href="https://github.com/chiamingyen/kmol2016"&gt;https://github.com/chiamingyen/kmol2016&lt;/a&gt;, 理論上, 只要按下 start.bat, 系統就會啟動 Leo Editor, 並且在對應啟動的 cmd 指令視窗, 就可以直接執行 git 指令.&lt;/p&gt;
&lt;p&gt;假如您使用 Ubuntu 操作系統, 則必須安裝 Python3, PyQt, Leo Editor, Pelican, Markdown, 假如還希望透過 Jupyter 進行 notebook 檔案導入, 還要安裝 Jupyter.&lt;/p&gt;
&lt;h1&gt;Pelican 網誌系統&lt;/h1&gt;
&lt;p&gt;可以透過 git clone 本網站的倉儲資料 &lt;a href="https://github.com/chiamingyen/kmolsite"&gt;https://github.com/chiamingyen/kmolsite&lt;/a&gt;, 然後將分支切換到 gh-pages, 就可以利用 Leo Editor 開啟分支工作目錄中的 kmol2016.leo, 然後開始建立自己的 Pelican 靜態網誌.&lt;/p&gt;
&lt;h1&gt;kmol2016 系統說明&lt;/h1&gt;
&lt;p&gt;這裡所謂的"可攜 kmol2016", 其實就是在 Windows 64 位元的環境中, 可以無需安裝, 直接利用 start.bat 中的設定, 就可以在 Windows 操作系統中執行建立 Pelican 靜態網誌所需要的指令, 其中包括啟動 Leo Editor, 執行 git 指令以及啟動 Jupyter 等.&lt;/p&gt;
&lt;h1&gt;kmolsite 系統說明&lt;/h1&gt;
&lt;p&gt;開啟 kmol2016.leo 後, 可以發現 @path content 以下的子節點, 就是 Pelican 網誌系統的原始 md 檔案, 只要透過 @button local pelican 指令的執行, 就可以在近端建立 Pelican 靜態網誌, 而 @button gh-pages pelican 則用來建立 Github pages 端的 Pelican 靜態網誌資料.&lt;/p&gt;
&lt;p&gt;從"設定與開發"節點下, 可以發現 pelicanconf.py 為近端與遠端的共同設定檔, 而近端透過 Pelican 轉檔時, 則採用 local_publishconf.py, 而 Gihub pages 端則使用 publishconf.py.&lt;/p&gt;
&lt;p&gt;其中因為採用 Tipue search plugin, 在近端使用 tipuesearch_content.js 而在遠端則使用 tipuesearch_content.json, 所以才會將 theme 目錄下區隔近端使用 pelican-bootstrap3_local, 而遠端則使用 pelican-bootstrap3 目錄, 其間的差異在於啟動 Tipue search 搜尋的模式設定, 近端為 static, 而遠端則為 json.&lt;/p&gt;</summary><category term="Python"></category><category term="Github pages"></category><category term="Leo Editor"></category></entry><entry><title>Tipue Site Search for Pelican</title><link href="./tipue-site-search-for-pelican.html" rel="alternate"></link><updated>2015-12-16T12:09:04+08:00</updated><author><name>kmol</name></author><id>tag:,2015-12-16:./tipue-site-search-for-pelican.html</id><summary type="html">&lt;p&gt;Pelican 靜態網站關鍵字搜尋.&lt;/p&gt;


&lt;p&gt;在這個網站中, 我們使用 Tipue Search 來搜尋內容.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tipue_search"&gt;https://github.com/getpelican/pelican-plugins/tree/master/tipue_search&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tipue Search requires BeautifulSoup.&lt;/p&gt;
&lt;p&gt;利用 pip 安裝 beautifulsoup4 模組.&lt;/p&gt;
&lt;p&gt;pip install beautifulsoup4&lt;/p&gt;
&lt;p&gt;此外, 為了要執行協同產品開發的設計運算分析, 還要安裝 &lt;a href="http://jupyter.org/"&gt;Jupyter&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;pip install jupyter&lt;/p&gt;
&lt;p&gt;而在 pelican 的網誌 md 檔案中,  則是透過 &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags"&gt;liquid_tags&lt;/a&gt; plugin 中的 notebook 來導入 &lt;a href="https://github.com/jupyter/notebook"&gt;Jupyter notebook&lt;/a&gt; 檔案.&lt;/p&gt;</summary><category term="Pelican Search"></category></entry><entry><title>Pelican 近端與遠端的設定</title><link href="./pelican-jin-duan-yu-yuan-duan-de-she-ding.html" rel="alternate"></link><updated>2015-12-16T12:09:04+08:00</updated><author><name>kmol</name></author><id>tag:,2015-12-16:./pelican-jin-duan-yu-yuan-duan-de-she-ding.html</id><summary type="html">&lt;p&gt;Pelican 近端與遠端的設定.&lt;/p&gt;


&lt;p&gt;基本的概念是, 在近端時, 靜態網頁使用相對目錄, SITEURL 設為 "./", 而在 Github pages 時, 則採用制式的符號名稱加上 repository 名稱作為 SITEURL.&lt;/p&gt;
&lt;p&gt;另外一個近端與遠端的差異為 Tipue search, 近端時, 利用 static 模組, 將所有網頁內容存為 tipuesearch_content.js, 而在 Github pages 時, 則使用 json 模組, 網頁內容存為 tipuesearch_content.json 格式.&lt;/p&gt;
&lt;p&gt;其中為了在網誌內容編寫與功能開發過程中, 能夠完全在近端測試 Github pages 端的所有功能, 利用 Leo Editor 的 @buttton 與 @edit, 分別針對兩端所需要的不同設定加以區分, 就連 theme 中有關 Tipue search 的啟動與設定, 也是分為近端與遠端兩套.&lt;/p&gt;
&lt;p&gt;在 &lt;a href="http://chiamingyen.github.io/kmolsite"&gt;kmolsite&lt;/a&gt; 的專案中, 我們可以發現, &lt;a href="http://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 在面對這些不同環境, 不同設定, 而必須以不同指令產生不同內容的情況下, 可以說應付自如.&lt;/p&gt;</summary><category term="Pelican 設定"></category></entry></feed>