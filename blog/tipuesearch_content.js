var tipuesearch = {"pages":[{"title":"Ubuntu 14.04 執行 Python 網際程式","tags":"Ubuntu","text":"Nginx 當前端, 在 Ubuntu 以 uwsgi 執行 Python 程式. nginx.conf 設定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 user www-data; worker_processes 4 ; pid /run/nginx.pid; events { worker_connections 768 ; # multi_accept on ; } http { ## # Basic Settings ## sendfile on ; tcp_nopush on ; tcp_nodelay on ; keepalive_timeout 65 ; types_hash_max_size 2048 ; # server_tokens off ; # server_names_hash_bucket_size 64 ; # server_name_in_redirect off ; include /etc/nginx/mime.types; default_type application /octet-stream; ## # Logging Settings ## access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; ## # Gzip Settings ## gzip on ; gzip_disable \"msie6\" ; # gzip_vary on ; # gzip_proxied any; # gzip_comp_level 6 ; # gzip_buffers 16 8 k; # gzip_http_version 1 . 1 ; # gzip_types text /plain text /css application /json application /x-javascript text /xml application /xml application /xml+rss text /javascript; ## # nginx-naxsi config ## # Uncomment it if you installed nginx-naxsi ## #include /etc/nginx/naxsi_core.rules; ## # nginx-passenger config ## # Uncomment it if you installed nginx-passenger ## #passenger_root /usr; #passenger_ruby /usr/bin/ruby; ## # Virtual Host Configs ## include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; } #mail { # # See sample authentication script at: # # http: //wiki.nginx.org/ImapAuthenticateWithApachePhpScript # # # auth_http localhost /auth.php; # # pop 3 _capabilities \"TOP\" \"USER\" ; # # imap_capabilities \"IMAP4rev1\" \"UIDPLUS\" ; # # server { # listen localhost:110; # protocol pop 3 ; # proxy on ; # } # # server { # listen localhost:143; # protocol imap; # proxy on ; # } #} 72 行中的 include /etc/nginx/sites-enabled/*; 表示導入 sites-enabled 中的所有設定檔. 而 sites-enabled 中只有一個 default 指向 sites-available/default, 所以隨後的設定都以 sites-available/default 檔案為主 sites-availables/default 設定檔案: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 server { listen 80 default_server ; listen [ :: ] : 80 default_server ipv6only = on ; listen 443 ssl ; listen [ :: ] : 443 ssl ipv6only = on ; location / static { alias / home / hp3 / cmsimply / wsgi / static / ; } location / { include uwsgi_params ; uwsgi_pass 127 . 0 . 0 . 1 : 8080 ; } server_name localhost ; #ssl on ; ssl_certificate / etc / nginx / ssl / nginx .crt ; ssl_certificate_key / etc / nginx / ssl / nginx .key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 .1 TLSv1 .2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } 其中第 13 行 include uwsgi_params;, 表示 uwsgi_params 檔案必須位於與 default 設定檔案同一個目錄, 也就是必須位於 sites-available 目錄中. 第 14 行 uwsgi_pass 127.0.0.1:8080; 表示 uwsgi 伺服傳送是透過近端主機中的 8080 埠號傳資料給 nginx, 然後再由 nginx 透過埠號 80 與 443 進行全球資訊網伺服, 因此用戶無法直接擷取 uwsgi 所傳出的資料, 而是經過內部 8080 傳給 nginx 後再以 http 或 https 與請求連線的客戶端進行互動. uwsgi_params 檔案內容: 1 2 3 4 5 6 7 8 9 10 11 12 13 uwsgi_param QUERY_STRING $ query_string ; uwsgi_param REQUEST_METHOD $ request_method ; uwsgi_param CONTENT_TYPE $ content_type ; uwsgi_param CONTENT_LENGTH $ content_length ; uwsgi_param REQUEST_URI $ request_uri ; uwsgi_param PATH_INFO $ document_uri ; uwsgi_param DOCUMENT_ROOT $ document_root ; uwsgi_param SERVER_PROTOCOL $ server_protocol ; uwsgi_param REMOTE_ADDR $ remote_addr ; uwsgi_param REMOTE_PORT $ remote_port ; uwsgi_param SERVER_ADDR $ server_addr ; uwsgi_param SERVER_PORT $ server_port ; uwsgi_param SERVER_NAME $ server_name ; 處理好 nginx 設定之後, 接著處理 uwsgi 的啟動, 希望在開機時就交由操作系統啟動, 這裡透過 /etc/init/uwsgi.conf 設定完成. /etc/init/uwsgi.conf 檔案內容: 1 2 3 4 5 6 7 description \"uwsgi Emperor\" start on runlevel [2345] stop on runlevel [06] respawn exec uwsgi --uid hp3 --gid hp3 --emperor /home/hp3/uwsgi_ini 以上採用 uwsgi Emperor 的設定方式啟動 /home/hp3/uwsgi_ini 目錄中的所有 uwsgi 程式啟動. 而目前位於 /home/hp3/uwsgi_ini 目錄中只有一個 uwsgi.ini 檔案, 內容如下: 1 2 3 4 5 6 [uwsgi] socket = :8080 processes = 4 master = true chdir = /home/hp3/cmsimply/wsgi wsgi-file = /home/hp3/cmsimply/wsgi/application 表示要以近端的 8080 埠號啟動 uwsgi, 而且設定執行目錄與執行的 uwsgi 應用程式 /home/hp3/cmsimply/wsgi/application 這時很重要的一點就是 application 必須採 uwsgi 啟動設定, 也就是與 OpenShift 端的啟動方式相同. /home/hp3/cmsimply/wsgi/application 最後啟動設定為: 1 2 3 4 5 6 7 8 9 if inOpenshift: # operate in OpenShift application = cherrypy.Application(root, config = application_conf) else: # operate in localhost #cherrypy.server.socket_port = 8080 #cherrypy.server.socket_host = 'XXX.XXX.17.103' #cherrypy.quickstart(root, config = application_conf) application = cherrypy.Application(root, config = application_conf)","url":"http://chiamingyen.github.io/kmolsite/blog/posts/2015/12/16/ubuntu-1404-zhi-xing-python-wang-ji-cheng-shi/"},{"title":"Pelican 近端與遠端的設定","tags":"Pelican","text":"Pelican 近端與遠端的設定. 基本的概念是, 在近端時, 靜態網頁使用相對目錄, SITEURL 設為 \"./\", 而在 Github pages 時, 則採用制式的符號名稱加上 repository 名稱作為 SITEURL. 另外一個近端與遠端的差異為 Tipue search, 近端時, 利用 static 模組, 將所有網頁內容存為 tipuesearch_content.js, 而在 Github pages 時, 則使用 json 模組, 網頁內容存為 tipuesearch_content.json 格式. 其中為了在網誌內容編寫與功能開發過程中, 能夠完全在近端測試 Github pages 端的所有功能, 利用 Leo Editor 的 @buttton 與 @edit, 分別針對兩端所需要的不同設定加以區分, 就連 theme 中有關 Tipue search 的啟動與設定, 也是分為近端與遠端兩套. 在 kmolsite 的專案中, 我們可以發現, Leo Editor 在面對這些不同環境, 不同設定, 而必須以不同指令產生不同內容的情況下, 可以說應付自如. 網誌存檔與呼叫設定 近端的設定, 主要在於瀏覽器無法自行開啟 index.html, 因此 ARTICLE_URL 直接指到 index.html 1 2 3 4 5 # 改為依照日期存檔呼叫 ARTICLE_URL = 'posts/{date:%Y}/{date:%m}/{date: %d }/{slug}/index.html' ARTICLE_SAVE_AS = 'posts/{date:%Y}/{date:%m}/{date: %d }/{slug}/index.html' PAGE_URL = 'pages/{slug}/' PAGE_SAVE_AS = 'pages/{slug}/index.html' 而在 gh-pages 端的設定, 因為會直接開啟各網誌文章目錄中的 index.html, 因此 ARTICLE_URL 只要設到文章目錄即可. 1 2 3 4 5 # 改為依照日期存檔呼叫 ARTICLE_URL = 'posts/{date:%Y}/{date:%m}/{date: %d }/{slug}/' ARTICLE_SAVE_AS = 'posts/{date:%Y}/{date:%m}/{date: %d }/{slug}/index.html' PAGE_URL = 'pages/{slug}/' PAGE_SAVE_AS = 'pages/{slug}/index.html' codehilite 設定 首先是 Pelican 的設定檔案: 1 2 # 近端與遠端的 code hightlight MD_EXTENSIONS = [ 'fenced_code' , 'extra' , 'codehilite(linenums=True)' ] 接著則是在所選擇的 Pygment css 設定檔案最後面, 加上以下格式設定碼: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 /* For codehilite */ .codehilitetable , .linenos { background : #2d2d2d ; color : #f2f0ec ; } .codehilitetable { font : 12px / 20px \"Source Code Pro\" , monospace ; overflow-x : auto ; display : block ; border-left : 3px solid #FF8000 ; border - radius : 2px ; padding : .8em 0 ; } .codehilitetable tbody tr { display : block ; } .codehilitetable pre { display : block ; margin : 0 ; padding : 0 ; border : 0 ; font-size : 100% ; font : inherit ; vertical-align : baseline ; background-color : inherit ; line-height : inherit ; color : inherit ; word - break : initial ; word - wrap : initial ; } .c , .linenos { color : #747369 ; } .codehilitetable , .linenos { background : #2d2d2d ; color : #f2f0ec ; } .linenos { border-right : 1px solid #3d3d3d ; padding-right : 0.7em ; margin-right : 0.7em ; width : 3em ; text-align : right ; position : absolute ; - webkit - user - select : none ; - khtml - user - select : none ; - moz - user - select : none ; - ms - user - select : none ; user - select : none ; } .codehilite { margin : 0 1em 0 3.5em ; } .c , .linenos { color : #747369 ; } .err { color : #f2777a ; } .k { color : #c9c ; } .l { color : #f99157 ; } .n { color : #f2f0ec ; } .o { color : #6cc ; } .p { color : #f2f0ec ; } .cm { color : #747369 ; } .cp { color : #747369 ; } .c1 { color : #747369 ; } .cs { color : #747369 ; } .gd { color : #f2777a ; } .ge { font-style : italic ; } .gh { color : #f2f0ec ; font-weight : bold ; } .gi { color : #9c9 ; } .gp { color : #747369 ; font-weight : bold ; } .gs { font-weight : bold ; } .gu { color : #6cc ; font-weight : bold ; } .kc { color : #c9c ; } .kd { color : #c9c ; } .kn { color : #6cc ; } .kp { color : #c9c ; } .kr { color : #c9c ; } .kt { color : #fc6 ; } .ld { color : #9c9 ; } .m { color : #f99157 ; } .s { color : #9c9 ; } .na { color : #69c ; } .nb { color : #f2f0ec ; } .nc { color : #fc6 ; } .no { color : #f2777a ; } .nd { color : #6cc ; } .ni { color : #f2f0ec ; } .ne { color : #f2777a ; } .nf { color : #69c ; } .nl { color : #f2f0ec ; } .nn { color : #fc6 ; } .nx { color : #69c ; } .py { color : #f2f0ec ; } .nt { color : #6cc ; } .nv { color : #f2777a ; } .ow { color : #6cc ; } .w { color : #f2f0ec ; } .mf { color : #f99157 ; } .mh { color : #f99157 ; } .mi { color : #f99157 ; } .mo { color : #f99157 ; } .sb { color : #9c9 ; } .sc { color : #f2f0ec ; } .sd { color : #747369 ; } .s2 { color : #9c9 ; } .se { color : #f99157 ; } .sh { color : #9c9 ; } .si { color : #f99157 ; } .sx { color : #9c9 ; } .sr { color : #9c9 ; } .s1 { color : #9c9 ; } .ss { color : #9c9 ; } .bp { color : #f2f0ec ; } .vc { color : #f2777a ; } .vg { color : #f2777a ; } .vi { color : #f2777a ; } .il { color : #f99157 ; }","url":"http://chiamingyen.github.io/kmolsite/blog/posts/2015/12/16/pelican-jin-duan-yu-yuan-duan-de-she-ding/"},{"title":"Recursively import all python files into Leo Editor","tags":"Leo Editor","text":"以遞迴方式導入 Python 程式碼. 此功能已經內建在 Leo Editor 的 scripts/scripts.leo 中, 程式碼如下: 1 2 3 4 5 6 7 8 9 '''Recursively import all python files in a directory and clean the result.''' c . recursiveImport ( dir_ = r'./' , kind = '@clean' , # The new best practice. one_file = False , safe_at_file = False , theTypes = None , # Same as ['.py'] ) 將此一節點從 scripts.leo 取出後, 存入要 import 程式碼的專案目錄中, 然後存為 .leo 後, 按下 Ctrl+b 就可以運行, 當然導入之後, 所有節點都以 @path 開頭, 表示此 leo 檔案並未與外部檔案直接存取互動, 而是將程式碼從外部檔案中, 架構性地取出, 並且存在 leo 專案檔中.","url":"http://chiamingyen.github.io/kmolsite/blog/posts/2015/12/16/recursively-import-all-python-files-into-leo-editor/"},{"title":"nginx 與 uwsgi 的結合","tags":"Ubuntu","text":"最新版的 nginx 必須與 2.0 版以上的 uwsgi 配合, 否則無法啟動. 這是發生在編號 103 HP 伺服器上的問題, 透過查驗, 才知道, 其實在各種協同合作模式中, 必須了解細節才能解決問題. 2015.11.03 情況: IPV4 與 IPV6 都可以 SSH, 因此從遠端進入, 開始尋找為何 nginx 與 uwsgi 無法正常結合運作. 首先新增管理者用戶: 1 2 sudo adduser username sudo visudo 將 username 納為可以執行 sudo 的帳號 在 %sudo 行下增加一行, 然後按下 Ctrl+O, 再按 Enter 經過 uwsgi 版次查驗, 發現透過 sudo apt-get install uwsgi 所安裝的版本為 1.9.17.1 版, 必須設法轉為 2.0 以上版本 版本查驗: 1 uwsgi --version 結果為 1.9.17.1-debian, 必須改為 2.0.11.2, 否則無法與 nginx 結合 移除利用 sudo apt-get install uwsgi 安裝的 1.9.17.1 版的 uswgi 1 sudo apt-get remove uwsgi 準備利用 pip3 安裝 uwsgi 其中必須執行 c 程式編譯, 因此必須安裝 build-essential 與 python3-dev 1 sudo apt-get install build-essential python3-dev 接著利用 pip3 安裝 uwsgi 1 sudo pip3 install uwsgi 利用 which uwsgi 找到 2.0.11.2 版的 uwsgi 位於 /usr/local/bin/uwsgi 因為 /etc/alternatives/uwsgi 指向 /usr/bin/uwsgi-core 為舊版, 因此必須重新設定 symbolic link, 讓 uwsgi 指令指到 2.0 版本. 1 2 3 cd /etc/alternatives sudo rm uwsgi (刪除舊的 symbolic link) sudo ln -s /usr/local/bin/uwsgi uwsgi (將新的 /usr/local/bin/uwsgi 對應到 uwsgi) 完成後執行: 1 sudo service uwsgi restart 就可順利啟動 nginx 中所對應設定的 CMSimply","url":"http://chiamingyen.github.io/kmolsite/blog/posts/2015/12/16/nginx-yu-uwsgi-de-jie-he/"},{"title":"2016kmol 測試","tags":"Brython","text":"在 Plican 靜態網頁系統中,Title 若使用中文, 而且不指定 Slug 的情況下, 系統會將中文字逐一轉為英文拼音來建立網誌檔案. 以下利用 Brython 語法, 在網頁中繪圖: 使用方法: http://www.brython.info/ window.onload=function(){ brython(1); } # 導入 doc from browser import document as doc import math # 準備繪圖畫布 canvas = doc[\"plotarea\"] ctx = canvas.getContext(\"2d\") # 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點 # ctx.setTransform(1, 0, 0, -1, 0, canvas.height) # 以下採用 canvas 原始座標繪圖 flag_w = canvas.width flag_h = canvas.height circle_x = flag_w/4 circle_y = flag_h/4 # 先畫滿地紅 ctx.fillStyle='rgb(255, 0, 0)' ctx.fillRect(0,0,flag_w,flag_h) # 再畫青天 ctx.fillStyle='rgb(0, 0, 150)' ctx.fillRect(0,0,flag_w/2,flag_h/2) # 畫十二道光芒白日 ctx.beginPath() star_radius = flag_w/8 angle = 0 for i in range(24): angle += 5*math.pi*2/12 toX = circle_x + math.cos(angle)*star_radius toY = circle_y + math.sin(angle)*star_radius # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo if (i): ctx.lineTo(toX, toY) else: ctx.moveTo(toX, toY) ctx.closePath() # 將填色設為白色 ctx.fillStyle = '#fff' ctx.fill() # 白日:藍圈 ctx.beginPath() ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True) ctx.closePath() # 填色設為藍色 ctx.fillStyle = 'rgb(0, 0, 149)' ctx.fill() # 白日:白心 ctx.beginPath() ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True) ctx.closePath() # 填色設為白色 ctx.fillStyle = '#fff' ctx.fill() Brython canvas 繪圖程式碼: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 <!-- 導入 brython_dist.js --> <script type= \"text/javascript\" src= \"http://brython.info/src/brython_dist.js\" ></script> <!-- 啟動 brython() --> <script> window . onload = function (){ brython ( 1 ); } </script> <!-- 以下利用 Brython 程式執行繪圖 --> <canvas id= \"plotarea\" width= \"300\" height= \"200\" ></canvas> <script type= \"text/python3\" > # 導入 doc from browser import document as doc import math # 準備繪圖畫布 canvas = doc [ \"plotarea\" ] ctx = canvas . getContext ( \"2d\" ) # 進行座標轉換 , x 軸不變 , y 軸反向且移動 canvas . height 單位光點 # ctx . setTransform ( 1 , 0 , 0 , - 1 , 0 , canvas . height ) # 以下採用 canvas 原始座標繪圖 flag_w = canvas . width flag_h = canvas . height circle_x = flag_w / 4 circle_y = flag_h / 4 # 先畫滿地紅 ctx . fillStyle = 'rgb(255, 0, 0)' ctx . fillRect ( 0 , 0 , flag_w , flag_h ) # 再畫青天 ctx . fillStyle = 'rgb(0, 0, 150)' ctx . fillRect ( 0 , 0 , flag_w / 2 , flag_h / 2 ) # 畫十二道光芒白日 ctx . beginPath () star_radius = flag_w / 8 angle = 0 for i in range ( 24 ) : angle += 5 * math . pi * 2 / 12 toX = circle_x + math . cos ( angle ) * star_radius toY = circle_y + math . sin ( angle ) * star_radius # 只有 i 為 0 時移動到 toX , toY , 其餘都進行 lineTo if ( i ) : ctx . lineTo ( toX , toY ) else : ctx . moveTo ( toX , toY ) ctx . closePath () # 將填色設為白色 ctx . fillStyle = '#fff' ctx . fill () # 白日 : 藍圈 ctx . beginPath () ctx . arc ( circle_x , circle_y , flag_w * 17 / 240 , 0 , math . pi * 2 , True ) ctx . closePath () # 填色設為藍色 ctx . fillStyle = 'rgb(0, 0, 149)' ctx . fill () # 白日 : 白心 ctx . beginPath () ctx . arc ( circle_x , circle_y , flag_w / 16 , 0 , math . pi * 2 , True ) ctx . closePath () # 填色設為白色 ctx . fillStyle = '#fff' ctx . fill () </script>","url":"http://chiamingyen.github.io/kmolsite/blog/posts/2015/12/16/2016kmol-ce-shi/"},{"title":"2016kmol initialized","tags":"kmol","text":"https://github.com/chiamingyen/kmol2016 是一個 Windows 64 位元環境下的可攜程式系統. 製作步驟如下: 選擇安裝 Python 3.4.4, 原因為 Python 3.5 與 PyQt5 必須自行編譯, 為了簡化, 選擇 Python 3.4.4, 並且使用現成的 PyQt5-5.5.1-gpl-Py3.4-Qt5.5.1-x64.exe 安裝 Python 3.4.4 時, 因為要製作成可攜免安裝套件, 故意不安裝 pip, 隨後再透過 get-pip.py 以手動安裝. 安裝 pip 後, 再利用 Leo Editor 原始碼安裝, 同時利用 pip 安裝 pelican Markdown Flask 為了要使用 Tipue Search , 再安裝 beautifulsoup4 為了要執行協同產品開發的設計運算分析, 還要安裝 Jupyter","url":"http://chiamingyen.github.io/kmolsite/blog/posts/2015/12/16/2016kmol-initialized/"},{"title":"How to create a Pelican static site?","tags":"Pelican","text":"如何在 Github page 建立靜態網誌系統? 1994 年開始, 許多人用 html 建立功能陽春的網站, 二十一個年頭過去, 無論大家經歷過多麼令人讚嘆激賞的全球資訊網技術, 我們終於又回到當時的起點, 還是採用最陽春的 html 格式來建立網站, 唯一的差別是, 這一次我們真正感受到天涯若比鄰, 遠端與近端, 在分散式版本的最高運行模式下, 原來是同一端. 工具組 假如您使用 Windows 64 位元操作系統, 可以直接下載可攜式系統 https://github.com/chiamingyen/kmol2016 , 理論上, 只要按下 start.bat, 系統就會啟動 Leo Editor, 並且在對應啟動的 cmd 指令視窗, 就可以直接執行 git 指令. 假如您使用 Ubuntu 操作系統, 則必須安裝 Python3, PyQt, Leo Editor, Pelican, Markdown, 假如還希望透過 Jupyter 進行 notebook 檔案導入, 還要安裝 Jupyter. Pelican 網誌系統 可以透過 git clone 本網站的倉儲資料 https://github.com/chiamingyen/kmolsite , 然後將分支切換到 gh-pages, 就可以利用 Leo Editor 開啟分支工作目錄中的 kmol2016.leo, 然後開始建立自己的 Pelican 靜態網誌. kmol2016 系統說明 這裡所謂的\"可攜 kmol2016\", 其實就是在 Windows 64 位元的環境中, 可以無需安裝, 直接利用 start.bat 中的設定, 就可以在 Windows 操作系統中執行建立 Pelican 靜態網誌所需要的指令, 其中包括啟動 Leo Editor, 執行 git 指令以及啟動 Jupyter 等. kmolsite 系統說明 開啟 kmol2016.leo 後, 可以發現 @path content 以下的子節點, 就是 Pelican 網誌系統的原始 md 檔案, 只要透過 @button local pelican 指令的執行, 就可以在近端建立 Pelican 靜態網誌, 而 @button gh-pages pelican 則用來建立 Github pages 端的 Pelican 靜態網誌資料. 從\"設定與開發\"節點下, 可以發現 pelicanconf.py 為近端與遠端的共同設定檔, 而近端透過 Pelican 轉檔時, 則採用 local_publishconf.py, 而 Gihub pages 端則使用 publishconf.py. 其中因為採用 Tipue search plugin, 在近端使用 tipuesearch_content.js 而在遠端則使用 tipuesearch_content.json, 所以才會將 theme 目錄下區隔近端使用 pelican-bootstrap3_local, 而遠端則使用 pelican-bootstrap3 目錄, 其間的差異在於啟動 Tipue search 搜尋的模式設定, 近端為 static, 而遠端則為 json.","url":"http://chiamingyen.github.io/kmolsite/blog/posts/2015/12/16/how-to-create-a-pelican-static-site/"},{"title":"Remove local and remote branch","tags":"Git","text":"刪除近端與遠端的 Git 分支. To delete a local branch git branch -D the_local_branch To remove a remote branch git push origin :the_remote_branch or git push origin --delete the_remote_branch","url":"http://chiamingyen.github.io/kmolsite/blog/posts/2015/12/16/remove-local-and-remote-branch/"},{"title":"Tipue Site Search for Pelican","tags":"Pelican","text":"Pelican 靜態網站關鍵字搜尋. 在這個網站中, 我們使用 Tipue Search 來搜尋內容. https://github.com/getpelican/pelican-plugins/tree/master/tipue_search Tipue Search requires BeautifulSoup. 利用 pip 安裝 beautifulsoup4 模組. pip install beautifulsoup4 此外, 為了要執行協同產品開發的設計運算分析, 還要安裝 Jupyter : pip install jupyter 而在 pelican 的網誌 md 檔案中, 則是透過 liquid_tags plugin 中的 notebook 來導入 Jupyter notebook 檔案.","url":"http://chiamingyen.github.io/kmolsite/blog/posts/2015/12/16/tipue-site-search-for-pelican/"}]};